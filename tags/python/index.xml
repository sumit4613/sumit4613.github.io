<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Sumit Singh</title>
    <link>https://sumit4613.github.io/tags/python/</link>
    <description>Recent content in Python on Sumit Singh</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 23 Nov 2022 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://sumit4613.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Let&#39;s talk about decorators in Python</title>
      <link>https://sumit4613.github.io/posts/python-decorators/</link>
      <pubDate>Wed, 23 Nov 2022 00:00:00 +0000</pubDate>
      <guid>https://sumit4613.github.io/posts/python-decorators/</guid>
      <description>&lt;p&gt;Let&amp;rsquo;s learn a little about decorators in Python. We will learn about what are decorators, how to use them, and how&#xA;to create them.&lt;/p&gt;&#xA;&lt;h2 id=&#34;what-are-decorators&#34;&gt;What are decorators?&lt;/h2&gt;&#xA;&lt;p&gt;Decorators are functions which take another function as an argument and returns another function. They are used to&#xA;extend the behavior of the latter function without explicitly modifying it.&lt;/p&gt;&#xA;&lt;h2 id=&#34;how-to-use-decorators&#34;&gt;How to use decorators?&lt;/h2&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s see how to use decorators in Python. We will use the &lt;code&gt;@&lt;/code&gt; symbol to use decorators. Let&amp;rsquo;s see an example:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Django Middlewares</title>
      <link>https://sumit4613.github.io/posts/django_middlewares/</link>
      <pubDate>Wed, 02 Nov 2022 00:00:00 +0000</pubDate>
      <guid>https://sumit4613.github.io/posts/django_middlewares/</guid>
      <description>&lt;p&gt;We&amp;rsquo;ll come to know about middlewares in django but first, let&amp;rsquo;s understand what is a middleware.&lt;/p&gt;&#xA;&lt;h2 id=&#34;what-is-a-middleware&#34;&gt;What is a middleware?&lt;/h2&gt;&#xA;&lt;p&gt;Middleware is a software that acts as a bridge between an operating system and applications running on it. It provides&#xA;common services and capabilities to applications outside what&amp;rsquo;s available from the operating system.&lt;/p&gt;&#xA;&lt;h2 id=&#34;what-is-a-django-middleware&#34;&gt;What is a django middleware?&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;A middleware is a component that sits between the Django view and the Django template.&lt;/li&gt;&#xA;&lt;li&gt;It is a framework that allows you to hook into Django&amp;rsquo;s request/response processing at various points.&lt;/li&gt;&#xA;&lt;li&gt;It&amp;rsquo;s a lightweight, low-level, plug-in system for globally altering Django&amp;rsquo;s input or output.&lt;/li&gt;&#xA;&lt;li&gt;It can be used to modify the incoming request before it reaches the view, or the outgoing response before it reaches&#xA;the browser.&lt;/li&gt;&#xA;&lt;li&gt;It can also be used to execute some code that doesn&amp;rsquo;t fit neatly into any of your existing views or models.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;how-middleware-works-in-django&#34;&gt;How middleware works in django?&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;When a request comes to the server, it is first processed by the middleware.&lt;/li&gt;&#xA;&lt;li&gt;The middleware then passes the request to the view.&lt;/li&gt;&#xA;&lt;li&gt;The view processes the request and returns a response.&lt;/li&gt;&#xA;&lt;li&gt;The middleware then processes the response and returns it to the browser.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;ordering-and-layering-of-middlewares&#34;&gt;Ordering and layering of middlewares&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Django middlewares are executed in the order they are defined in the &lt;code&gt;MIDDLEWARE&lt;/code&gt; setting.&lt;/li&gt;&#xA;&lt;li&gt;The order of middlewares is important because each middleware can modify the request and response.&lt;/li&gt;&#xA;&lt;li&gt;The order of middlewares is also important because some middlewares depend on the output of other middlewares. For&#xA;example, the &lt;code&gt;SessionMiddleware&lt;/code&gt; depends on the &lt;code&gt;AuthenticationMiddleware&lt;/code&gt; to populate the &lt;code&gt;request.user&lt;/code&gt; attribute.&lt;/li&gt;&#xA;&lt;li&gt;Middlewares are run in &lt;strong&gt;reverse order&lt;/strong&gt; when the response is returned to the browser.&lt;/li&gt;&#xA;&lt;li&gt;The &lt;code&gt;SecurityMiddleware&lt;/code&gt; is the first middleware in the list of middlewares. It is the first middleware to process the&#xA;request and the last middleware to process the response.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;how-to-write-a-custom-middleware-in-pre-django-110-style&#34;&gt;How to write a custom middleware in pre-Django 1.10-style?&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;In pre-Django 1.10-style, we have to write a middleware class that implements the &lt;code&gt;process_request()&lt;/code&gt; and&#xA;&lt;code&gt;process_response()&lt;/code&gt; methods.&lt;/li&gt;&#xA;&lt;li&gt;You need to inherit the &lt;code&gt;MiddlewareMixin&lt;/code&gt; class to make sure that your middleware is compatible with both pre-Django&#xA;1.10-style and post-Django 1.10-style.&lt;/li&gt;&#xA;&lt;li&gt;The &lt;code&gt;process_request()&lt;/code&gt; method is called before the view is called.&lt;/li&gt;&#xA;&lt;li&gt;The &lt;code&gt;process_response()&lt;/code&gt; method is called after the view is called.&lt;/li&gt;&#xA;&lt;li&gt;The &lt;code&gt;process_exception()&lt;/code&gt; method is called if an exception occurs in the view. This method is optional.&lt;/li&gt;&#xA;&lt;li&gt;The &lt;code&gt;process_template_response()&lt;/code&gt; method is called after the view is called and the response is rendered. This method&#xA;is&#xA;optional.&lt;/li&gt;&#xA;&lt;li&gt;The &lt;code&gt;process_view()&lt;/code&gt; method is called just before Django calls the view.. This method is optional.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Example:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Oops! Python</title>
      <link>https://sumit4613.github.io/posts/oops-python/</link>
      <pubDate>Wed, 12 Oct 2022 00:00:00 +0000</pubDate>
      <guid>https://sumit4613.github.io/posts/oops-python/</guid>
      <description>&lt;p&gt;I was refreshing my theoretical concepts of Object-Oriented Programming. So just to remember all of my learnings, I&#xA;thought why not write a post about it. So here it is.&lt;/p&gt;&#xA;&lt;h2 id=&#34;what-is-object-oriented-programming&#34;&gt;What is Object-Oriented Programming?&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Object-Oriented Programming (OOP) is a programming paradigm that uses objects and their interactions to design and&#xA;program applications.&lt;/li&gt;&#xA;&lt;li&gt;OOP is a way of programming that is based on the concept of &amp;ldquo;objects&amp;rdquo;, which can contain data, in the form of fields,&#xA;often known as attributes; and code, in the form of procedures, often known as methods.&lt;/li&gt;&#xA;&lt;li&gt;A feature of object is that an object&amp;rsquo;s procedures can access and often modify the data fields of the object with&#xA;which they are associated (objects have a notion of &amp;ldquo;this&amp;rdquo; or &amp;ldquo;self&amp;rdquo;).&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;what-is-an-object&#34;&gt;What is an Object?&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;An object is a software bundle of related state and behavior.&lt;/li&gt;&#xA;&lt;li&gt;Objects are the things you think about first in designing a program, and they are also the units of code that are&#xA;eventually derived from the process.&lt;/li&gt;&#xA;&lt;li&gt;An object is an instance of a class.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;what-is-a-class&#34;&gt;What is a Class?&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;A class is a blueprint or prototype that defines a set of attributes that will characterize any object that is&#xA;instantiated from the class.&lt;/li&gt;&#xA;&lt;li&gt;A class can be defined as a collection of objects. It is a logical entity that has some specific attributes and&#xA;methods (functions) defined within it.&lt;/li&gt;&#xA;&lt;li&gt;A class is like an object constructor, or a &amp;ldquo;blueprint&amp;rdquo; for creating objects.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Example:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Install Python</title>
      <link>https://sumit4613.github.io/posts/install-python-in-ubuntu/</link>
      <pubDate>Mon, 05 Sep 2022 00:00:00 +0000</pubDate>
      <guid>https://sumit4613.github.io/posts/install-python-in-ubuntu/</guid>
      <description>&lt;p&gt;On new Ubuntu servers, Python 3.10 is installed by default. But if you want to install a specific version of Python,&#xA;this post shows you how.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Run the following commands with &lt;code&gt;sudo&lt;/code&gt; or &lt;code&gt;root&lt;/code&gt; user.&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;install-the-prerequisites&#34;&gt;Install the prerequisites&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo apt-get update&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo apt install software-properties-common&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;update-the-sources&#34;&gt;Update the sources&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo add-apt-repository ppa:deadsnakes/ppa&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When prompted press Enter to continue:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;Press [ENTER] to continue or Ctrl-c to cancel adding it.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;install-python-38&#34;&gt;Install Python 3.8&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo apt-get -y install python3.8  &lt;span class=&#34;c1&#34;&gt;# or any other version&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;verify-the-installation&#34;&gt;Verify the installation&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;python3.8 --version&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Cheers! At this point, Python 3.8 is installed on your Ubuntu system, and you can start using it.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
